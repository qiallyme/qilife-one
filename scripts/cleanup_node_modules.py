import subprocess
from pathlib import Path

ROOT_DIR = Path(__file__).parent

def run_git_command(command):
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    return result.returncode, result.stdout.strip() + result.stderr.strip()

def cleanup_node_modules():
    # Find all node_modules directories
    node_paths = list(ROOT_DIR.rglob("node_modules"))

    if not node_paths:
        print("No node_modules directories found.")
        return

    removed = []

    for path in node_paths:
        # Check if tracked in Git
        code, output = run_git_command(f'git ls-files "{path}"')
        if output:
            print(f"Tracked node_modules found: {path}")
            # Remove from Git tracking
            code, rm_output = run_git_command(f'git rm -r --cached "{path}"')
            print(rm_output)
            removed.append(str(path))
        else:
            print(f"node_modules not tracked: {path}")

    if removed:
        print("\nRemoved from Git tracking:")
        for r in removed:
            print(f"- {r}")
    else:
        print("No tracked node_modules were found.")

    print("\nRun `git commit -m \"Remove node_modules from tracking\"` to finalize.")

if __name__ == "__main__":
    cleanup_node_modules()
